"use strict";function _defineProperty(t,s,e){return s in t?Object.defineProperty(t,s,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[s]=e,t}class CollapseController extends Stimulus.Controller{initialize(){document.querySelector("#collapse-style")||document.querySelector("head").insertAdjacentHTML("beforeend",`\n                <style id="collapse-style">\n                    .collapse {\n                        display: none;\n                    }\n\n                    .collapse.show {\n                        display: block;\n                    }\n\n                    .collapsing {\n                        position: relative;\n                        height: 0;\n                        overflow: hidden;\n                        transition: height ${this.hasTransitionValue?this.transitionValue:"0.35"}s ease;\n                    }\n                </style>\n            `)}connect(){this.statusValue?this.wrapperTarget.classList.add("collapse","show"):this.wrapperTarget.classList.add("collapse")}actualStatus(){return this.wrapperTarget.classList.contains("collapse")&&this.wrapperTarget.classList.contains("show")}statusValueChanged(){if(this.waitTransition)return;if(this.statusValue===this.actualStatus())return;this.waitTransition=!0;const t=this.statusValue;this.dispatchEvent(t),t||(this.wrapperTarget.style.height=this.contentTarget.scrollHeight+"px"),this.wrapperTarget.classList.add("collapsing"),this.wrapperTarget.classList.remove("collapse","show"),t?this.wrapperTarget.style.height=this.contentTarget.scrollHeight+"px":setTimeout(()=>{this.wrapperTarget.style.height=""}),setTimeout(()=>{this.wrapperTarget.classList.remove("collapsing"),this.wrapperTarget.classList.add("collapse"),this.wrapperTarget.style.height="",t&&this.wrapperTarget.classList.add("show"),this.waitTransition=!1,setTimeout(()=>{this.statusValueChanged()},100)},1e3*(this.hasTransitionValue?this.transitionValue:.35))}dispatchEvent(t){this.element.dispatchEvent(new CustomEvent("stimulus-collapse-toggle",{detail:{status:t}})),t?this.element.dispatchEvent(new CustomEvent("stimulus-collapse-status-true")):this.element.dispatchEvent(new CustomEvent("stimulus-collapse-status-false"))}toggle(){this.statusValue=!this.statusValue}on(){this.statusValue=!0}off(){this.statusValue=!1}}let application;_defineProperty(CollapseController,"targets",["content","wrapper"]),_defineProperty(CollapseController,"values",{status:Boolean,transition:Number}),(application=window.stimulusApplication?window.stimulusApplication:Stimulus.Application.start()).register("collapse",CollapseController),window.stimulusApplication=application;
